// sass --watch style/style.scss:style/style.css

// Grid Size
$w: 75px; // Width (75px default)
$h: $w*.88; // Height (66px default)

// Number of Rows / Columns
$col: 10; // Columns
$row: 14; // Rows

// Debug Variables
// @debug $w;
// @debug $h;
// @debug $col;
// @debug $row;

// Grid line thickness and color
$grid-border: 1px solid #fff;

// Define Shapes:
// [Consecutive Number],[Shape starting point (→, ↓,) from top left corner],([Clipping points from starting point (→↓, →↓, →↓, →↓)]),[Optional z-index]

$layout:
(1, 1, 1, (0 3, 1.5 0, 2 1, 3 1, 4 3)),
(2, 2, 0, (0 0, 2 0, 3 2, 1 2)),
(3, 5, 0, (0 2, 1 0, 2 2)),
(4, 6.5, 1, (0 0, .5 1, 1 0)),
(5, 7, 0, (0 2, 1 0, 3 0, 2 2)),
(6, 0, 2, (0 0, 2 0, 1 2)),
(7, 4, 2, (0 0, 2 0, 1 2)),
(8, 5, 2, (0 0, 0 2, 2 2, 2 0), 2),
(9, 6, 2, (0 0, 2 0, 3 2, 1 2)),
(10, 8, 2, (0 0, 2 0, 1 2)),
(11, .5, 4, (0 1, .5 0, 1 1)),
(12, 0, 5, (0 1, .5 0, 1 1)),
(13, 1, 5, (0 1, .5 0, 1 1)),
(14, .5, 5, (0 0, .5 1, 1 0)),
(15, 1, 4, (0 0, 2 0, 1 2)),
(16, 2, 5, (0 1, .5 0, 1 1)),
(17, 2.5, 4, (0 1, .5 0, 2.5 0, 1.5 2, .5 2)),
(18, 4, 4, (0 2, 1 0, 2 2, 1 4)),
(19, 5, 4, (0 0, 2 0, 1 2)),
(20, 6, 4, (1 0, 3 0, 2 2, 3 4, 1 4, 0 2), 3),
(21, 8, 5, (0 0, 2 0, 2 1, 1 3, 0 1), 1), //(21, 8, 5, (0 0, 2 0, 1 2), 1),
(22, 0, 6, (0 0, 4 0, 5 2, 5 3, 2.5 3, 2.5 2, 1 2), 1),
(23, 0, 8, (0 0, 0 4, 1 4, 2 2, 1 0)),
(24, 1, 8, (0 0, .5 1, 1.5 1, 1 0)),
(25, 3, 10, (0 0, 2 0, 2 3, 0 3), 1),
(26, 2, 8, (0 0, .5 1, 1 0)),
(27, 1.5, 9, (0 0, .5 1, 1 0)),
(28, 1, 8, (2 0, 3 2, 1 6, 0 4)),
(29, 0, 12, (0 2, 1 0, 2 2)),
(30, 3, 12 , (0 0, 2 0, 3 2, 1 2)),
(31, 7, 10, (0 2, 1 0, 2 2)),
(32, 6, 12, (0 2, 1 0, 2 2)),
(33, 8, 12, (0 2, 1 0, 2 2)),
(34, 6, 8, (0 2, 1 0, 2 2, 1 4), 3),
(35, 7, 12, (0 0, 2 0, 1 2)),
(36, 3, 6, (3 0, 4 2, 3 4, 4 6, 0 6, 1 4, 0 2, 2 2)),
(37, 9, 7, (.5 0, 0 1, .5 2, 1 1, 2 1, 2 0)),
(38, 7, 8, (0 0, 2 0, 3 2, 2 4)),
(39, 2.5, 13, (0 0, .5 1, 1 0)),
(40, 3, 6, (0 0, 4 0, 4 6, 0 6), 2);


body { 
    margin: 0px; 
    background-color: #191919;
}

p {
    margin: 0px;
    font-family: Arial, Helvetica, sans-serif;
    font-size: 12px;
    color: #fff;
    text-align: center;
    width: 13px;
    height: 13px;
    position: absolute;
    background-color: #000;
    padding: 6px;
    border: $grid-border;
    border-radius: 13px;
    display: none; // Hide extra grid numbers
}

.container {
    position: relative;
    width: $col*$w;
    height: $row*$h;
    margin: 50px auto 0px auto;
    a, div {
	position: absolute;
	background-size: 100% 100%;
	}
}

.columns, .rows {
    z-index: 5;
    position: relative;
    width: 100%;
    height: 100%;
    p {
        top: -27px; // Cols
        left: -27px; // Rows
    }
}

.rows div {
    width: 100%;
    border-bottom: $grid-border;
}

.columns div{
    height: 100%;
    border-right: $grid-border;
}


@for $y from 1 through $row {
    .row#{$y} {
        height:#{$y*$h}; 
        p {
            top:($y*$h)-14px;
            display:initial; 
        }
    }
}

@for $x from 1 through $col {

    .columns div:nth-child(#{$x}) {
        // background-color: red;
        width:#{$x*$w};
        p { 
            left:($x*$w)-14px;
            display:initial;
        }
    }


    // .col#{$x} {
    //     width:#{$x*$w};  
    //     p { 
    //         left:($x*$w)-14px;
    //         display:initial;
    //     }
    // }
}


@each $number, $left, $top, $clip, $layer in $layout {
    .shape#{$number} {
        $cp:();
        $max:();
        $height:();
        @for $i from 1 through length($clip) {
            $cp:append($cp,nth(nth($clip,$i),1)*$w nth(nth($clip,$i),2)*$h, comma);  
            // Make the largest clipping point the width
            $max:append($max,nth(nth($clip,$i),1));
            // Make the largest clipping point the height   
            $height:append($height,nth(nth($clip,$i),2));
        }
        left:$left*$w;
        top:$top*$h;
        width: max($max...)*$w;
        height: max($height...)*$h;
        background-image: url('../images/image_#{$number}.png');
        clip-path:polygon($cp);
        @if $layer {z-index: $layer;}
    }
}

